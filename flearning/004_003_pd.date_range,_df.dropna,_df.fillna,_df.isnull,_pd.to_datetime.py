# 004_003_pd.date_range,_df.dropna,_df.fillna,_df.isnull,_pd.to_datetime.py

import numpy as np
import pandas as pd
pd.set_option('display.max_colwidth', -1)    # Sets number of maximum columns in terminal
pd.set_option('display.max_columns', None)   # Sets maximum width of each single field in terminal

# c array_np: (6,4) 2D array
array_np=np.random.randn(6,4)
# array([[ 0.18569805,  0.80329895, -0.55254866,  1.14563706],
#        [-1.0904539 ,  0.88513563,  0.20410661,  0.66624626],
#        [ 2.13528668, -1.0975321 , -0.35784639, -0.27511822],
#        [-0.08444269, -0.05662932, -0.52029272,  1.59666608],
#        [ 1.69676855,  1.59248043, -0.45963117, -0.32011351],
#        [-0.84976101, -0.2034934 ,  0.95905905, -0.94104622]])

dataframe1=pd.DataFrame(array_np)
#           0         1         2         3
# 0  0.185698  0.803299 -0.552549  1.145637
# 1 -1.090454  0.885136  0.204107  0.666246
# 2  2.135287 -1.097532 -0.357846 -0.275118
# 3 -0.084443 -0.056629 -0.520293  1.596666
# 4  1.696769  1.592480 -0.459631 -0.320114
# 5 -0.849761 -0.203493  0.959059 -0.941046

dataframe1.columns=["A","B","C","D"]
#           A         B         C         D
# 0  0.185698  0.803299 -0.552549  1.145637
# 1 -1.090454  0.885136  0.204107  0.666246
# 2  2.135287 -1.097532 -0.357846 -0.275118
# 3 -0.084443 -0.056629 -0.520293  1.596666
# 4  1.696769  1.592480 -0.459631 -0.320114
# 5 -0.849761 -0.203493  0.959059 -0.941046

# ======================================================================
date_data=pd.date_range("20160701",periods=6)
# DatetimeIndex(['2016-07-01', '2016-07-02', '2016-07-03', '2016-07-04', '2016-07-05', '2016-07-06'],
#               dtype='datetime64[ns]', freq='D')

dataframe1.index=date_data
#                    A         B         C         D
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118
# 2016-07-04 -0.084443 -0.056629 -0.520293  1.596666
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114
# 2016-07-06 -0.849761 -0.203493  0.959059 -0.941046

# --------------------------------------------------
dataframe1["F"]=[1.0,np.nan,3.5,6.1,np.nan,7.0]
#                    A         B         C         D    F
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637  1.0
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246 NaN
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-04 -0.084443 -0.056629 -0.520293  1.596666  6.1
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114 NaN
# 2016-07-06 -0.849761 -0.203493  0.959059 -0.941046  7.0

# --------------------------------------------------
# You can remove entire row data which contains "any" nan
dataframe1.dropna(how="any")
#                    A         B         C         D    F
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637  1.0
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-04 -0.084443 -0.056629 -0.520293  1.596666  6.1
# 2016-07-06 -0.849761 -0.203493  0.959059 -0.941046  7.0

# --------------------------------------------------
# You can remove entire row which contains "all" nan
dataframe1.dropna(how="all")
#                    A         B         C         D    F
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637  1.0
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246 NaN
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-04 -0.084443 -0.056629 -0.520293  1.596666  6.1
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114 NaN
# 2016-07-06 -0.849761 -0.203493  0.959059 -0.941046  7.0

# --------------------------------------------------
# You can replace nan with value
dataframe1.fillna(value=5.0)
#                    A         B         C         D    F
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637  1.0
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246  5.0
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-04 -0.084443 -0.056629 -0.520293  1.596666  6.1
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114  5.0
# 2016-07-06 -0.849761 -0.203493  0.959059 -0.941046  7.0

# --------------------------------------------------
# nan: True, not-non: False
dataframe1.isnull()
#                 A      B      C      D      F
# 2016-07-01  False  False  False  False  False
# 2016-07-02  False  False  False  False  True
# 2016-07-03  False  False  False  False  False
# 2016-07-04  False  False  False  False  False
# 2016-07-05  False  False  False  False  True
# 2016-07-06  False  False  False  False  False

# --------------------------------------------------
# f column
f_c=dataframe1.isnull()["F"]
# 2016-07-01    False
# 2016-07-02    True
# 2016-07-03    False
# 2016-07-04    False
# 2016-07-05    True
# 2016-07-06    False
# Freq: D, Name: F, dtype: bool

dataframe1
#                    A         B         C         D    F
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637  1.0
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246 NaN
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-04 -0.084443 -0.056629 -0.520293  1.596666  6.1
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114 NaN
# 2016-07-06 -0.849761 -0.203493  0.959059 -0.941046  7.0

dataframe1.loc[f_c,:]
#                    A         B         C         D   F
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246 NaN
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114 NaN

# ==================================================
date_data=pd.to_datetime("20160701")
# Timestamp('2016-07-01 00:00:00')

dataframe1
#                    A         B         C         D    F
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637  1.0
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246 NaN
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-04 -0.084443 -0.056629 -0.520293  1.596666  6.1
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114 NaN
# 2016-07-06 -0.849761 -0.203493  0.959059 -0.941046  7.0

dataframe1.drop(date_data)
#                    A         B         C         D    F
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246 NaN
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-04 -0.084443 -0.056629 -0.520293  1.596666  6.1
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114 NaN
# 2016-07-06 -0.849761 -0.203493  0.959059 -0.941046  7.0

date1=pd.to_datetime("20160704")
date2=pd.to_datetime("20160706")
dataframe1.drop([date1,date2])
#                    A         B         C         D    F
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637  1.0
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246 NaN
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114 NaN

dataframe1.drop("F",axis=1)
#                    A         B         C         D    F
# 2016-07-01  0.185698  0.803299 -0.552549  1.145637  1.0
# 2016-07-02 -1.090454  0.885136  0.204107  0.666246 NaN
# 2016-07-03  2.135287 -1.097532 -0.357846 -0.275118  3.5
# 2016-07-05  1.696769  1.592480 -0.459631 -0.320114 NaN

dataframe1.drop(["B","F"],axis=1)
#                    A         C         D
# 2016-07-01  0.185698 -0.552549  1.145637
# 2016-07-02 -1.090454  0.204107  0.666246
# 2016-07-03  2.135287 -0.357846 -0.275118
# 2016-07-04 -0.084443 -0.520293  1.596666
# 2016-07-05  1.696769 -0.459631 -0.320114
# 2016-07-06 -0.849761  0.959059 -0.941046
